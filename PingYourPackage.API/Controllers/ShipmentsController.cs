using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Net.Http.Formatting;
using PingYourPackage.Domain.Contracts;
using PingYourPackage.Domain.Api;
using DTO = PingYourPackage.API.Model.Dtos;
using System.Threading.Tasks;
using System.Threading;

namespace PingYourPackage.API.Controllers
{
    public class ShipmentsController : ApiController
    {
        public IShipmentsControllerLogic controller;

        //public ShipmentsController()
        //{
        //    this.controller = new ShipmentsControllerLogic();
        //}

        public ShipmentsController(ShipmentsControllerLogic shipmentControllerLogic)
        {
            this.controller = shipmentControllerLogic;
        }

        // GET api/<controller>
        public HttpResponseMessage Get()
        {
            var shipments = this.controller.GetAllShipments();
            
            return shipments != null ? this.Request.CreateResponse<IEnumerable<DTO.ShipmentRecord>>(HttpStatusCode.OK, shipments) : new HttpResponseMessage(HttpStatusCode.NotFound); 
        }

        // GET api/<controller>/5
        public HttpResponseMessage Get(int id)
        {
            var shipment = this.controller.GetShipment(id);
                        
            return shipment != null ? this.Request.CreateResponse<DTO.ShipmentRecord>(HttpStatusCode.OK, shipment) : new HttpResponseMessage(HttpStatusCode.NotFound);
        }

        // GET api/<controller>?number=5
        public HttpResponseMessage Get(string number)
        {
            var shipment = this.controller.GetShipmentByTrackingNumber(number);

            return shipment != null ? this.Request.CreateResponse<DTO.ShipmentRecord>(HttpStatusCode.OK, shipment) : new HttpResponseMessage(HttpStatusCode.NotFound);
        }

        // POST api/<controller>
        public HttpResponseMessage Post(DTO.ShipmentRecord item)
        {
            var shipment = this.controller.InsertShipment(item);
            
            if (shipment == null)
            { 
                return new HttpResponseMessage(HttpStatusCode.BadRequest);
            }
            var responseMessage = Request.CreateResponse(HttpStatusCode.Created);
            responseMessage.Headers.Location = new Uri(string.Format(@"{0}/{1}", Request.RequestUri, shipment.Id.ToString()));
            
            return responseMessage;
        }    
   
        // PUT api/shipments/5
        public HttpResponseMessage Put(int id, DTO.ShipmentRecord item)
        {
            var shipment = this.controller.ModifyShipment(id, item);

            if (shipment == null)
            {
                return new HttpResponseMessage(HttpStatusCode.BadRequest);
            }

            var responseMessage = Request.CreateResponse(HttpStatusCode.OK);
            responseMessage.Headers.Location = new Uri(Request.RequestUri.ToString());

            return responseMessage;
        }

        // DELETE api/shipments/5
        public HttpResponseMessage Delete(int id)
        {
            var responseResult = this.controller.RemoveShipment(id);           
            return responseResult == null ? Request.CreateResponse(HttpStatusCode.OK) : Request.CreateResponse(HttpStatusCode.NotFound, responseResult.Message);
        }

        // POST api/<controller>
        //public HttpResponseMessage Post(Shipment item)
        //{
        //    int result = Repository.Add(item);
        //    switch (result) {
        //        case -1: return Request.CreateResponse(HttpStatusCode.NoContent);
        //        case 0: return Request.CreateResponse(HttpStatusCode.NotFound);
        //        case 1: var response = Request.CreateResponse(HttpStatusCode.OK);
        //            // Instead of returning the object they gave you, it is considered better practice 
        //            //to either return nothing or the same object but also containing the autogenerated id 
        //            //for use later by the client.
        //                response.Content = new ObjectContent<Shipment>(item, new JsonMediaTypeFormatter(), "application/json");
        //                return response;                                
        //        default: return Request.CreateResponse(HttpStatusCode.BadRequest);
        //    }
        //}

        // PUT api/<controller>/5
        //public HttpResponseMessage Put(int id, Shipment item)
        //{
        //    int result = Repository.Edit(id, item);
        //    switch (result)
        //    {
        //        case -1: return Request.CreateResponse(HttpStatusCode.NoContent);
        //        case 0: return Request.CreateResponse(HttpStatusCode.NotFound);
        //        case 1: var response = Request.CreateResponse(HttpStatusCode.OK);
        //                response.Content = new ObjectContent<Shipment>(item, new JsonMediaTypeFormatter(), "application/json");
        //                return response;
        //        default: return Request.CreateResponse(HttpStatusCode.BadRequest);
        //    }
        //}

        // DELETE api/<controller>/5
        //public HttpResponseMessage Delete(int id)
        //{
        //    var item = Repository.GetSingle(id);
        //    var result = Repository.Delete(id);
        //    switch (result)
        //    {
        //        case -1: return Request.CreateResponse(HttpStatusCode.NoContent);
        //        case 0: return Request.CreateResponse(HttpStatusCode.NotFound);
        //        case 1: var response = Request.CreateResponse(HttpStatusCode.OK);
        //                response.Content = new ObjectContent<Shipment>(item, new JsonMediaTypeFormatter(), "application/json");
        //                return response;
        //        default: return Request.CreateResponse(HttpStatusCode.BadRequest);
        //    }
        //}
    }
    
}
